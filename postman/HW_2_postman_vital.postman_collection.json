{
	"info": {
		"_postman_id": "5e45d513-6ab3-4bf8-bb70-a89967f2e7e7",
		"name": "HW_2_postman_vital",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_ login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//создание окружения token",
							"let jsonData = pm.response.json()",
							"pm.environment.set(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "qwer1234",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_ user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест кода 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// проверка структуры json в ответе",
							"let response_json = pm.response.json();//значение из ответа (распарсить ответ)",
							"let salary = JSON.parse(request.data).salary; //парсит request body и достаем значение salary",
							"let schema =",
							"{   \"type\": \"object\",      ",
							"    \"properties\": {",
							"        \"person\": {            ",
							"            \"type\": \"object\",            ",
							"            \"required\": [\"u_age\",",
							"                         \"u_name\",",
							"                         \"u_salary_1_5_year\"",
							"                        ],",
							"            \"properties\": {",
							"                          \"u_age\": {\"type\": \"integer\"},",
							"                          \"u_name\": {\"type\": \"array\"},   ",
							"                          \"u_salary_1_5_year\": {\"type\": \"integer\"}",
							"                          }            ",
							"                    },",
							"        \"qa_salary_after_12_months\": {\"type\": \"number\"},",
							"        \"qa_salary_after_6_months\": {\"type\": \"integer\"},",
							"        \"start_qa_salary\": {\"type\": \"integer\"}",
							"                  }",
							"}",
							"pm.test('Schema is valid', function () {",
							"    let valid = tv4.validate(response_json, schema, true, true)//сравнивание схемы",
							"    pm.expect(valid).to.be.true;    ",
							"});",
							"//коэфициент умножения на 2",
							"pm.test('coefficient*2', function () {    ",
							"    let coefficient;",
							"    if (response_json.qa_salary_after_6_months==salary*2)",
							"        coefficient = true",
							"            else coefficient = false",
							"    pm.expect(coefficient).to.be.true    ",
							"});",
							"//коэфициент умножения на 2.9",
							"pm.test ('coefficient*2.9', function() {",
							"    let coefficient;",
							"    if (response_json.qa_salary_after_12_months==salary*2.9)",
							"        coefficient = true",
							"            else coefficient = false",
							"    pm.expect(coefficient).to.be.true            ",
							"});",
							"//коэфициент умножения на 4",
							"pm.test('coefficient*4', function() {",
							"    let coefficient;",
							"    if (response_json.person.u_salary_1_5_year==salary*4)",
							"        coefficient = true",
							"            else coefficient = false",
							"    pm.expect(coefficient).to.be.true        ",
							"});",
							"//значение из поля 'u_salary_1.5_year' и передать в поле u_salary_1_5_year запроса ",
							"pm.environment.set(\"u_salary_1_5_year\", response_json.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"age\": {{age}},\n    \"salary\": {{salary}},\n    \"name\": \"{{name}}\",\n    \"auth_token\": \"{{token}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_ new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"// проверка структуры json в ответе",
							"let response_json = pm.response.json();//значение из ответа (распарсить ответ)",
							"let schema =",
							"{   \"type\": \"object\",",
							"    \"properties\": { ",
							"                    \"age\": {\"type\": \"integer\"},",
							"                    \"name\": {\"type\": \"string\" },",
							"                    \"salary\": {\"type\": \"array\",",
							"                              \"items\": [ {\"type\": \"integer\"},",
							"                                         {\"type\": \"string\"},",
							"                                         {\"type\": \"string\"}",
							"                                        ]",
							"                               } ",
							"                  },",
							"    \"required\": [\"age\",",
							"                 \"name\",",
							"                 \"salary\"",
							"                ]",
							"}",
							"pm.test('Schema is valid', function () {",
							"    let valid = tv4.validate(response_json, schema, true, true)//сравнивание схемы",
							"    pm.expect(valid).to.be.true;    ",
							"});",
							"//коэфициент умножения на 2",
							"let salary = request.data.salary;",
							"console.log(salary);",
							"let salary_array_1 = response_json.salary[1];",
							"console.log(salary_array_1);",
							"pm.test('coefficient*2', function () {    ",
							"     let coefficient;     ",
							"     if (salary_array_1==salary*2)",
							"         coefficient = true",
							"             else coefficient = false",
							"     pm.expect(coefficient).to.be.true    ",
							"});",
							"//коэфициент умножения на 3",
							"let salary_array_2 = response_json.salary[2];",
							"console.log(salary_array_2);",
							"pm.test('coefficient*3', function () {    ",
							"     let coefficient;     ",
							"     if (salary_array_2==salary*3)",
							"         coefficient = true",
							"             else coefficient = false",
							"     pm.expect(coefficient).to.be.true    ",
							"});",
							"//проверить, что 2-й элемент массива salary больше 1-го и 0-го",
							"let salary_array_0 = response_json.salary[0];",
							"console.log(salary_array_0);",
							"pm.test('comparing_array_values', function () {    ",
							"     let coefficient;     ",
							"     if (salary_array_2 > salary_array_1 && salary_array_0)",
							"         coefficient = true",
							"             else coefficient = false",
							"     pm.expect(coefficient).to.be.true    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_ test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let response_json = pm.response.json();//значение из ответа (распарсить ответ)",
							"let schema =",
							"{   \"type\": \"object\",",
							"    \"properties\": {\"age\": {\"type\": \"integer\"},",
							"                   \"daily_food\": {\"type\": \"number\"},",
							"                   \"daily_sleep\": {\"type\": \"number\"},",
							"                   \"name\": {\"type\": \"string\"}",
							"                  },",
							"    \"required\": [\"age\",",
							"                 \"daily_food\",",
							"                 \"daily_sleep\",",
							"                 \"name\"",
							"                ]",
							"}",
							"pm.test('Schema is valid', function () {",
							"    let valid = tv4.validate(response_json, schema, true, true)//сравнивание схемы",
							"    pm.expect(valid).to.be.true;    ",
							"});",
							"//коэфициент умножения weight на 0.012",
							"let weight = request.data.weight;",
							"console.log(weight);",
							"let daily_food = response_json.daily_food;",
							"console.log(daily_food);",
							"pm.test('coefficient*0.012', function () {    ",
							"     let coefficient;     ",
							"     if (daily_food==weight*0.012)",
							"         coefficient = true",
							"             else coefficient = false",
							"     pm.expect(coefficient).to.be.true    ",
							"});",
							"//коэфициент умножения weight на 2.5",
							"let daily_sleep = response_json.daily_sleep;",
							"console.log(daily_sleep);",
							"pm.test('coefficient*2.5', function () {    ",
							"     let coefficient;     ",
							"     if (daily_sleep==weight*2.5)",
							"         coefficient = true",
							"             else coefficient = false",
							"     pm.expect(coefficient).to.be.true    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "{{weight}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_ get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let response_json = pm.response.json();//значение из ответа (распарсить ответ)",
							"let schema =",
							"{  \"type\": \"object\",",
							"   \"properties\": {\"age\": {\"type\": \"string\"},",
							"                  \"family\": {\"type\": \"object\",",
							"                            \"properties\": {\"children\": ",
							"                                          {\"type\": \"array\",",
							"                                                \"items\": [",
							"                                                         {\"type\": \"array\",",
							"                                                            \"items\": [",
							"                                                                    {\"type\": \"string\"},",
							"                                                                    {\"type\": \"integer\"}",
							"                                                                    ]",
							"                                                         },",
							"                                          {\"type\": \"array\",",
							"                                                \"items\": [",
							"                                                         {\"type\": \"string\"},",
							"                                                         {\"type\": \"integer\"} ",
							"                                                         ]",
							"                                                 }",
							"                                                ]",
							"                                            },",
							"                                            \"u_salary_1_5_year\": {\"type\": \"integer\"}",
							"                                            },",
							"                            \"required\": [\"children\",",
							"                                        \"u_salary_1_5_year\"",
							"                                        ]",
							"                            },",
							"                \"name\": {\"type\": \"string\"},",
							"                \"salary\": {\"type\": \"integer\"}",
							"                },",
							"  \"required\": [\"age\",",
							"               \"family\",",
							"               \"name\",",
							"               \"salary\"",
							"              ]",
							"}",
							"pm.test('Schema is valid', function () {",
							"    let valid = tv4.validate(response_json, schema, true, true)//сравнивание схемы",
							"    pm.expect(valid).to.be.true;    ",
							"});",
							"//проверить что занчение поля name = значению переменной name из окружения",
							"let env_name = pm.environment.get('name');",
							"console.log (env_name);",
							"let resp_name = response_json.name;",
							"console.log (resp_name)",
							"pm.test ('name=name', function() {    ",
							"pm.expect(env_name).to.eql(resp_name);",
							"});",
							"//значение age в ответе соответсвует отправленному в запросе значению age",
							"let resp_age = response_json.age;",
							"console.log (resp_age);",
							"let reque_age = request.data.age;",
							"console.log (reque_age);",
							"pm.test ('age=age', function() {    ",
							"pm.expect(resp_age).to.eql(reque_age);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//обекты из responsa помещенны в массив ",
							"let response_json = pm.response.json();",
							"pm.test(\"ID\", function(){",
							"    let cur_id_val = Object.values(response_json)",
							"    console.log (cur_id_val)",
							"    var arr = new Array ()",
							"    for (let i = 0; i < cur_id_val.length; i++)",
							"    arr[i] = cur_id_val[i].Cur_ID",
							"    console.log (arr) ",
							"let random = Math.floor(Math.random()*arr.length)//рандомное значение из массива",
							"console.log(random)",
							"//Cur_ID передать через окружение ",
							"pm.environment.set(\"Cur_ID\",arr[random])",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let response_json = pm.response.json();//значение из ответа (распарсить ответ)",
							"let schema =",
							"{\"type\": \"object\",",
							"                \"properties\": {",
							"                            \"Cur_Abbreviation\": {\"type\": \"string\"},",
							"                            \"Cur_ID\": {\"type\": \"integer\"},",
							"                            \"Cur_Name\": {\"type\": \"string\"},",
							"                            \"Cur_OfficialRate\": {\"type\": \"number\"},",
							"                            \"Cur_Scale\": {\"type\": \"integer\"},",
							"                            \"Date\": {\"type\": \"string\"}",
							"                            },",
							"                \"required\": [",
							"                            \"Cur_Abbreviation\",",
							"                            \"Cur_ID\",",
							"                            \"Cur_Name\",",
							"                            \"Cur_OfficialRate\",",
							"                            \"Cur_Scale\",",
							"                            \"Date\"",
							"                            ]",
							"}",
							"pm.test('Schema is valid', function () {",
							"    let valid = tv4.validate(response_json, schema, true, true)//сравнивание схемы",
							"    pm.expect(valid).to.be.true;    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "487",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}